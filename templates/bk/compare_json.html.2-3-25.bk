<!DOCTYPE html>
<html>
<head>
    <title>Compare JSON Files - Ghost EW Performance Lab</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .kpi-chart-wrapper {
            display: flex;
            width: 100%;
            overflow-x: auto; /* Allow scrolling if needed */
            gap: 10px; /* Space between charts */
        }
        .chart-container {
            flex: 1; /* Each chart takes equal space */
            min-width: 400px; /* Minimum width per chart */
            height: 300px; /* Chart height */
        }
        .chart-header {
            height: 40px; /* Dedicated space for avg values */
            text-align: left;
            padding-left: 10px;
            font-size: 10px;
            color: #333;
        }
        canvas {
            width: 100% !important;
            height: 100% !important;
        }
        .compare-table .table-header, .compare-table .kpi-row {
            display: flex;
        }
        .compare-table .table-cell {
            flex: 1;
            padding: 5px;
        }
    </style>
</head>
<body>
    <a href="/" class="home-button">Home</a>
    <div class="content-section">
        <h1>Comparing {{ file1 }} vs {{ file2 }}</h1>
        {% for test in comparison_data %}
        <div class="test-dropdown">
            <details open>
                <summary>{{ test.filename1 }} vs {{ test.filename2 }}</summary>
                <div class="test-content">
                    <div class="compare-table">
                        <div class="table-header">
                            <div class="table-cell">KPI</div>
                            <div class="table-cell">{{ file1 }} ({{ test.filename1 }})</div>
                            <div class="table-cell">{{ file2 }} ({{ test.filename2 }})</div>
                            <div class="table-cell">Difference (%)</div>
                            <div class="table-cell">No Outliers Diff (%)</div>
                        </div>
                        {% set kpi_order = ['VUs', 'Flits', 'CPU_util%', 'StrormletCPU', 'r74_CPU_flytes', 'RequestDurationK6', 'r83_TAT', 'r4_RequestEndTime', 'r5_TAT', 'r6_TransferTime', 'ApplyMetadata', 'PageLoadTimeK6', 'f6_f_line_TAT', 'r82_total_stage_time', 'r82_EW_total_time', 'MaxVUs', 'DroppedIterations', 'f5_f_line_DNS_lookup'] %}
                        {% for kpi in kpi_order if kpi in test.kpi_data %}
                        {% set data = test.kpi_data[kpi] %}
                        {% set chart_id = test.filename1|regex_replace('[^a-zA-Z0-9_]', '_') ~ '-' ~ test.filename2|regex_replace('[^a-zA-Z0-9_]', '_') ~ '-' ~ kpi|regex_replace('[^a-zA-Z0-9_]', '_') %}
                        <div class="kpi-row" data-chart-id="{{ chart_id }}">
                            <div class="table-cell">{{ kpi }}</div>
                            <div class="table-cell">{{ data.avg1|round(2) }}</div>
                            <div class="table-cell">{{ data.avg2|round(2) }}</div>
                            <div class="table-cell {% if data.diff_pct != 'N/A' and data.diff_pct > 3 %}highlight-red{% elif data.diff_pct != 'N/A' %}highlight-green{% endif %}">
                                {% if data.diff_pct != 'N/A' %}{{ data.diff_pct|round(2) }}%{% else %}N/A{% endif %}
                            </div>
                            <div class="table-cell {% if data.no_outliers_diff != 'N/A' and data.no_outliers_diff > 3 %}highlight-red{% elif data.no_outliers_diff != 'N/A' %}highlight-green{% endif %}">
                                {% if data.no_outliers_diff != 'N/A' %}{{ data.no_outliers_diff|round(2) }}%{% else %}N/A{% endif %}
                            </div>
                        </div>
                        <div class="kpi-chart-wrapper" id="chart-wrapper-{{ chart_id }}" style="display: none;">
                            <div class="chart-container">
                                <div class="chart-header" id="header-{{ chart_id }}-new"></div>
                                <canvas id="chart-{{ chart_id }}-new"></canvas>
                            </div>
                            <div class="chart-container">
                                <div class="chart-header" id="header-{{ chart_id }}-rec_deg"></div>
                                <canvas id="chart-{{ chart_id }}-rec_deg"></canvas>
                            </div>
                        </div>
                        {% endfor %}
                    </div>
                </div>
            </details>
        </div>
        {% endfor %}
        <a href="javascript:history.back()" class="back-link">Back</a>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM fully loaded');

            function toggleChart(id) {
                console.log('Toggling chart for ID: ' + id);
                const wrapper = document.getElementById('chart-wrapper-' + id);
                if (wrapper) {
                    const isHidden = wrapper.style.display === 'none';
                    wrapper.style.display = isHidden ? 'flex' : 'none';
                    if (isHidden) {
                        const chartNew = charts[id + '-new'];
                        const chartRecDeg = charts[id + '-rec_deg'];
                        if (chartNew) {
                            console.log('Showing chart-new for ID: ' + id);
                            chartNew.resize();
                            chartNew.update();
                            displayAvgValues(id + '-new', chartNew);
                        }
                        if (chartRecDeg) {
                            console.log('Showing chart-rec_deg for ID: ' + id);
                            chartRecDeg.resize();
                            chartRecDeg.update();
                            displayAvgValues(id + '-rec_deg', chartRecDeg);
                        }
                    }
                } else {
                    console.error('Wrapper not found for ID: ' + id);
                }
            }

            function displayAvgValues(chartId, chart) {
                const header = document.getElementById('header-' + chartId);
                const fullAvg = chart.data.datasets[1].data[0];
                const noOutliersAvg = chart.data.datasets[2].data[0];
                const color = chart.data.datasets[0].backgroundColor.includes('54, 162, 235') ? 'rgba(54, 162, 235, 1)' : 'rgba(255, 159, 64, 1)';
                header.innerHTML = `
                    <div style="color: ${color}; font-size: 10px;">Full Avg: ${fullAvg.toFixed(2)}</div>
                    <div style="color: ${color}; font-size: 10px;">No Outliers Avg: ${noOutliersAvg.toFixed(2)}</div>
                `;
            }

            console.log('Attaching click handlers');
            const kpiRows = document.querySelectorAll('.kpi-row');
            console.log('Found ' + kpiRows.length + ' KPI rows');
            kpiRows.forEach(row => {
                row.addEventListener('click', () => {
                    const chartId = row.getAttribute('data-chart-id');
                    console.log('Clicked KPI row with chart ID: ' + chartId);
                    toggleChart(chartId);
                });
            });

            const comparisonData = {
                {% for test in comparison_data %}
                '{{ test.filename1|regex_replace('[^a-zA-Z0-9_]', '_') }}-{{ test.filename2|regex_replace('[^a-zA-Z0-9_]', '_') }}': {
                    {% for kpi, data in test.kpi_data.items() %}
                    '{{ kpi|regex_replace('[^a-zA-Z0-9_]', '_') }}': {
                        values1: [{% for v in data.values1 %}{% if v != 'NA' %}{{ v }}{% else %}null{% endif %}{% if not loop.last %},{% endif %}{% endfor %}],
                        values2: [{% for v in data.values2 %}{% if v != 'NA' %}{{ v }}{% else %}null{% endif %}{% if not loop.last %},{% endif %}{% endfor %}],
                        avg1: {{ data.avg1 }},
                        avg2: {{ data.avg2 }},
                        clean_avg1: {{ data.clean_avg1 }},
                        clean_avg2: {{ data.clean_avg2 }},
                        no_outliers_diff: {{ data.no_outliers_diff|tojson }}
                    }{% if not loop.last %},{% endif %}
                    {% endfor %}
                }{% if not loop.last %},{% endif %}
                {% endfor %}
            };

            console.log('Comparison Data:', comparisonData);

            const charts = {};
            const kpiOrder = ['VUs', 'Flits', 'CPU_util%', 'StrormletCPU', 'r74_CPU_flytes', 'RequestDurationK6', 'r83_TAT', 'r4_RequestEndTime', 'r5_TAT', 'r6_TransferTime', 'ApplyMetadata', 'PageLoadTimeK6', 'f6_f_line_TAT', 'r82_total_stage_time', 'r82_EW_total_time', 'MaxVUs', 'DroppedIterations', 'f5_f_line_DNS_lookup'];

            console.log('Starting chart initialization');

            Object.keys(comparisonData).forEach(testKey => {
                console.log('Processing test: ' + testKey);
                kpiOrder.forEach(kpi => {
                    const kpiKey = kpi.replace(/[^a-zA-Z0-9_]/g, '_');
                    if (comparisonData[testKey][kpiKey]) {
                        const chartId = testKey + '-' + kpiKey;
                        const canvasNew = document.getElementById('chart-' + chartId + '-new');
                        const canvasRecDeg = document.getElementById('chart-' + chartId + '-rec_deg');
                        if (canvasNew && canvasRecDeg) {
                            const ctxNew = canvasNew.getContext('2d');
                            const ctxRecDeg = canvasRecDeg.getContext('2d');
                            const data = comparisonData[testKey][kpiKey];
                            const validValues1 = data.values1.filter(v => v !== null);
                            const validValues2 = data.values2.filter(v => v !== null);
                            const maxLength = Math.max(validValues1.length, validValues2.length);
                            const labels = Array(maxLength).fill('').map((_, i) => `Iter ${i + 1}`);

                            // Use precomputed clean averages from app.py
                            const cleanAvg1 = data.clean_avg1;
                            const cleanAvg2 = data.clean_avg2;

                            // Calculate max y-axis value across all data
                            const allValues = [
                                ...validValues1,
                                ...validValues2,
                                data.avg1,
                                data.avg2,
                                cleanAvg1,
                                cleanAvg2
                            ].filter(v => v !== null);
                            const maxY = Math.max(...allValues) * 1.1; // Add 10% padding

                            console.log('Initializing charts for ID: ' + chartId, {
                                values1: validValues1,
                                values2: validValues2,
                                avg1: data.avg1,
                                avg2: data.avg2,
                                cleanAvg1: cleanAvg1,
                                cleanAvg2: cleanAvg2,
                                labels: labels,
                                maxY: maxY
                            });

                            // Chart for _new (blue)
                            charts[chartId + '-new'] = new Chart(ctxNew, {
                                type: 'bar',
                                data: {
                                    labels: labels,
                                    datasets: [
                                        {
                                            label: '{{ file1|replace("JSON_", "")|replace(".json", "") }}',
                                            data: validValues1,
                                            backgroundColor: 'rgba(54, 162, 235, 0.5)',
                                            borderColor: 'rgba(54, 162, 235, 1)',
                                            borderWidth: 1,
                                            barThickness: 20
                                        },
                                        {
                                            label: 'Avg {{ file1|replace("JSON_", "")|replace(".json", "") }}',
                                            data: Array(maxLength).fill(data.avg1),
                                            type: 'line',
                                            borderColor: 'rgba(54, 162, 235, 1)',
                                            borderWidth: 3,
                                            pointRadius: 0
                                        },
                                        {
                                            label: 'Clean Avg {{ file1|replace("JSON_", "")|replace(".json", "") }}',
                                            data: Array(maxLength).fill(cleanAvg1),
                                            type: 'line',
                                            borderColor: 'rgba(54, 162, 235, 0.7)',
                                            borderWidth: 2,
                                            borderDash: [5, 5],
                                            pointRadius: 0
                                        }
                                    ]
                                },
                                options: {
                                    scales: {
                                        y: {
                                            beginAtZero: true,
                                            max: maxY,
                                            ticks: { font: { size: 12 } }
                                        },
                                        x: {
                                            display: false,
                                            ticks: { font: { size: 10 } }
                                        }
                                    },
                                    plugins: {
                                        legend: {
                                            labels: { font: { size: 10 } }
                                        },
                                        tooltip: {
                                            enabled: false
                                        }
                                    },
                                    hover: {
                                        mode: null
                                    }
                                }
                            });

                            // Chart for _rec_deg (orange)
                            charts[chartId + '-rec_deg'] = new Chart(ctxRecDeg, {
                                type: 'bar',
                                data: {
                                    labels: labels,
                                    datasets: [
                                        {
                                            label: '{{ file2|replace("JSON_", "")|replace(".json", "") }}',
                                            data: validValues2,
                                            backgroundColor: 'rgba(255, 159, 64, 0.5)',
                                            borderColor: 'rgba(255, 159, 64, 1)',
                                            borderWidth: 1,
                                            barThickness: 20
                                        },
                                        {
                                            label: 'Avg {{ file2|replace("JSON_", "")|replace(".json", "") }}',
                                            data: Array(maxLength).fill(data.avg2),
                                            type: 'line',
                                            borderColor: 'rgba(255, 159, 64, 1)',
                                            borderWidth: 3,
                                            pointRadius: 0
                                        },
                                        {
                                            label: 'Clean Avg {{ file2|replace("JSON_", "")|replace(".json", "") }}',
                                            data: Array(maxLength).fill(cleanAvg2),
                                            type: 'line',
                                            borderColor: 'rgba(255, 159, 64, 0.7)',
                                            borderWidth: 2,
                                            borderDash: [5, 5],
                                            pointRadius: 0
                                        }
                                    ]
                                },
                                options: {
                                    scales: {
                                        y: {
                                            beginAtZero: true,
                                            max: maxY,
                                            ticks: { font: { size: 12 } }
                                        },
                                        x: {
                                            display: false,
                                            ticks: { font: { size: 10 } }
                                        }
                                    },
                                    plugins: {
                                        legend: {
                                            labels: { font: { size: 10 } }
                                        },
                                        tooltip: {
                                            enabled: false
                                        }
                                    },
                                    hover: {
                                        mode: null
                                    }
                                }
                            });

                            // Display initial avg values
                            displayAvgValues(chartId + '-new', charts[chartId + '-new']);
                            displayAvgValues(chartId + '-rec_deg', charts[chartId + '-rec_deg']);
                        } else {
                            console.error('Canvas not found for chart ID: ' + chartId);
                        }
                    }
                });
            });

            console.log('Chart initialization complete');
        });
    </script>
</body>
</html>
